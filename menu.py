# ‚îÄ‚îÄ‚îÄ menu.py ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import random, json, sys, os, pathlib
import ttkbootstrap as tb
from ttkbootstrap.constants import *
from tkinter import filedialog, messagebox
import tkinter as tk   
from utils import resource_path, ensure_data_dir
import form_guide                        # –æ–∫–Ω–æ-—à–ø–∞—Ä–≥–∞–ª–∫–∞

PROGRESS_PATH = "data/progress.json"
# --------------------------------------------------------------------------


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ / —Å—Ç–∏–ª–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DARK_TURQ  = "#007A7A"     # —Ç—ë–º–Ω–æ-–±–∏—Ä—é–∑–æ–≤—ã–π (–∫–Ω–æ–ø–∫–∏)
DARK_BLUE  = "#002B5B"     # –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π —Å–∏–Ω–∏–π   (—Ñ–∞–∫—Ç + —Å–æ–≤–µ—Ç)
BTN_STYLE_NAME = "Turq.TButton"


def init_custom_styles(style: tb.Style) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å `Turq.TButton` 1 —Ä–∞–∑ –Ω–∞ –≤—Å—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    –í—ã–∑—ã–≤–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞-root.
    """
    if BTN_STYLE_NAME in style.element_names():
        return                                                   # —É–∂–µ –µ—Å—Ç—å

    style.configure(
        BTN_STYLE_NAME,
        foreground=DARK_TURQ,
        font=("Segoe UI", 10, "bold"),
        padding=(10, 4),
        borderwidth=1,
        relief="raised",
    )
    style.map(
        BTN_STYLE_NAME,
        foreground=[("pressed", DARK_TURQ), ("active", DARK_TURQ)],
        background=[("pressed", style.colors.light),
                    ("active",  style.colors.light)],
    )
# --------------------------------------------------------------------------


class MainMenu:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ —Ñ–æ—Ä–º."""

    BUILTIN_FORMS = [
        "Te-form", "Negative-form", "Masu-form", "Ta-form",
        "Potential-form", "Passive-form", "Causative-form", "Imperative-form",
        "Volitional-form", "Ba-form", "Tara-form",
        "Masu-stem", "Progressive-form", "Command-form"
    ]

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def __init__(self):
        # ‚îÄ‚îÄ –∫–æ–ø–∏—Ä—É–µ–º data/ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ ‚îÄ‚îÄ
        ensure_data_dir([
            "facts_200.json", "lessons.json",
            "grammar_n5.json", "grammar_n4.json", "grammar_n3.json",
            "grammar_constructions.json", "conjugation_table_with_translations.json"
        ])

        # ‚îÄ‚îÄ –∫–æ—Ä–Ω–µ–≤–æ–µ –æ–∫–Ω–æ TTK-Bootstrap ‚îÄ‚îÄ
        self.root = tb.Window(themename="minty")
        self.root.title("–¢—Ä–µ–Ω–∞–∂—ë—Ä –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ / —Ñ–æ—Ä–º")
        self.root.resizable(False, False)
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

        init_custom_styles(self.root.style)    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫

        # ‚îÄ‚îÄ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚îÄ‚îÄ
        self.user_name      = tb.StringVar()
        self.user_level     = tb.StringVar(value="N5")
        self.mode           = tb.StringVar(value="grammar")
        self.grammar_source = tb.StringVar(value="builtin")

        self.imported_grammar  : list[str]        = []
        self.remaining_grammar : list             = []
        self.remaining_forms   = MainMenu.BUILTIN_FORMS.copy()
        self.selected_count    = tb.IntVar(value=5)

        self.load_progress()      # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º (–µ—Å–ª–∏ –µ—Å—Ç—å)

        # ‚îÄ‚îÄ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∫–∏ ‚îÄ‚îÄ
        lbl_font = ("Segoe UI", 10, "bold")
        self.greeting_label = tb.Label(self.root,
                                       font=("Segoe UI", 30, "italic"),
                                       bootstyle="info", wraplength=500)

        self.fact_label   = tb.Label(self.root, font=lbl_font,
                                     foreground=DARK_BLUE,
                                     wraplength=500, justify="left")

        self.grammar_label = tb.Label(self.root, font=lbl_font,
                                     foreground=DARK_BLUE,
                                     wraplength=500)

        self.advice_label = tb.Label(self.root, font=lbl_font,
                                     foreground=DARK_BLUE,
                                     wraplength=500)

        self.counts_label = tb.Label(self.root, bootstyle="light")

        # –Ω–∞–ø–æ–ª–Ω–∏–º —Å–ª—É—á–∞–π–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.fact_label  .config(text=self.get_random_fact())
        self.advice_label.config(text=self.get_random_advice())

        self.build_ui()
        # –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç N5/N4/N3, —Å—á—ë—Ç—á–∏–∫ —Ç–∞–∫–∂–µ –º–µ–Ω—è–µ—Ç—Å—è
        self.user_level.trace_add("write", lambda *_: self.use_builtin_grammar())

        # –Ω–∞—Ä–∏—Å—É–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É
        self.update_counts_label()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ¬´–∫–∞—Ä–∫–∞—Å¬ª UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def build_ui(self):
        fr = tb.Frame(self.root, padding=10)
        fr.pack(fill=BOTH, expand=YES)

        tb.Label(fr, text="–¢—Ä–µ–Ω–∞–∂—ë—Ä —è–ø–æ–Ω—Å–∫–æ–π –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ / —Ñ–æ—Ä–º",
                 font=("Segoe UI", 13, "bold"),
                 bootstyle="primary", wraplength=500).pack()

        self.greeting_label.pack()

        tb.Label(
            fr,
            text=("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º, —É—Ä–æ–≤–µ–Ω—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, "
                  "–∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ‚ñ∂ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è."),
            bootstyle="light", wraplength=500, justify="left"
        ).pack(pady=(0, 10))

        # --- –ø–æ–ª—è –≤–≤–æ–¥–∞ / –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---------------------------------------
        tb.Label(fr, text="–ò–º—è:").pack(anchor="w")
        tb.Entry(fr, textvariable=self.user_name).pack(fill=X)

        tb.Label(fr, text="–ü–æ–≤—Ç–æ—Ä—è–µ–º:").pack(anchor="w", pady=(10, 0))
        tb.Combobox(fr, textvariable=self.mode,
                    values=["grammar", "forms"], state="readonly").pack(fill=X)

        tb.Label(fr, text="–£—Ä–æ–≤–µ–Ω—å (–¥–ª—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏):").pack(anchor="w", pady=(10, 0))
        tb.Combobox(fr, textvariable=self.user_level,
                    values=["N5", "N4", "N3"], state="readonly").pack(fill=X)

        tb.Button(fr, text="–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏",
                  style=BTN_STYLE_NAME, command=self.import_grammar_list).pack(pady=5)

        tb.Label(fr, text="–≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è:").pack(anchor="w", pady=(10, 0))
        tb.Entry(fr, textvariable=self.selected_count, width=5).pack()

        # --- 4 –≥–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å) ------------------------------
        tb.Button(
            fr, text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞",
            style=BTN_STYLE_NAME,
            command=lambda: self.grammar_label.config(text=self.get_random_grammar())
        ).pack(pady=5)

        self.fact_label.pack(pady=3)
        self.grammar_label.pack(pady=3)
        self.advice_label.pack(pady=3)

        tb.Button(fr, text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å",
                  style=BTN_STYLE_NAME, command=self.reset_progress).pack(pady=(8, 2))

        tb.Button(fr, text="‚ñ∂ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ",
                  style=BTN_STYLE_NAME, command=self.start_session).pack(pady=2)

        self.counts_label = tb.Label(
            fr,
            bootstyle="info",
            font=("Segoe UI", 10, "bold")
        )
        

        tb.Button(fr, text="üìñ –®–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞–º",
                  style=BTN_STYLE_NAME, command=self.open_form_guide).pack(pady=(6, 0))
                  
        self.counts_label.pack(pady=(10, 0)) 

    
    def use_builtin_grammar(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (N5/N4/N3)."""
        self.grammar_source.set("builtin")
        self.remaining_grammar.clear()       # –∑–∞—Å—Ç–∞–≤–∏–º –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
        self.update_counts_label()
        
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ¬´—Å–ª—É—á–∞–π–Ω—ã–µ¬ª —Ç–µ–∫—Å—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def get_random_fact(self):
        try:
            with open("data/facts_200.json", encoding="utf-8") as f:
                return "üéå " + random.choice(json.load(f))
        except Exception as e:
            return f"üéå (—Ñ–∞–∫—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e})"

    def get_random_advice(self):
        tips = [
            "–ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –≤—Å–ª—É—Ö –¥–ª—è –ª—É—á—à–µ–π –ø–∞–º—è—Ç–∏.",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ.",
            "–°–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —è–ø–æ–Ω—Å–∫–æ–º —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏.",
            "–í–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞ —è–ø–æ–Ω—Å–∫–æ–º."
        ]
        return "üí° " + random.choice(tips)

    def get_random_grammar(self):
        try:
            lvl = self.user_level.get().lower()
            with open(f"data/grammar_{lvl}.json", encoding="utf-8") as f:
                g = random.choice(json.load(f))
            return f"üìö {g['title']} ‚Äî {g['comment']}"
        except Exception as e:
            return f"üìö (–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {e})"

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∏–º–ø–æ—Ä—Ç / —Å–±—Ä–æ—Å / –ø–æ–¥—Å—á—ë—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def import_grammar_list(self):
        path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ .txt —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
            filetypes=[("Text files", "*.txt")])

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ —Ñ–æ—Ä–º–∞—Ç–µ
        messagebox.showinfo(
            "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞",
            "–í —Ñ–∞–π–ª–µ –∫–∞–∂–¥–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å\n"
            "—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.\n"
            "–ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è."
        )
        if not path:
            return
        try:
            with open(path, encoding="utf-8") as f:
                self.imported_grammar = [ln.strip() for ln in f if ln.strip()]
                if not self.imported_grammar:
                    messagebox.showwarning("–ò–º–ø–æ—Ä—Ç", "–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø—É—Å—Ç—ã–µ!")
                    return
            self.remaining_grammar = self.imported_grammar.copy()
            self.grammar_source.set("imported")
            messagebox.showinfo("–ò–º–ø–æ—Ä—Ç", f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(self.imported_grammar)} –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.")
            self.update_counts_label()
            self.save_progress()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", e)

    def reset_progress(self):
        """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å: —Å–Ω–æ–≤–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ + –æ–±–Ω—É–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏."""
        self.grammar_source.set("builtin")          # ‚Üê –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        self.remaining_forms   = MainMenu.BUILTIN_FORMS.copy()
        self.remaining_grammar = []                 # –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–µ–Ω
        self.ensure_builtin_loaded()
        self.update_counts_label()
        messagebox.showinfo("–°–±—Ä–æ—Å", "–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω—É–ª—ë–Ω.")
        self.save_progress()

    # –ø–æ–º–æ—â–Ω–∏–∫: –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ N5/N4/N3 –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    def ensure_builtin_loaded(self):
        if self.remaining_grammar:
            return
        lvl = self.user_level.get().lower()
        try:
            with open(f"data/grammar_{lvl}.json", encoding="utf-8") as f:
                self.remaining_grammar = [
                    (g["title"], g.get("comment", "")) for g in json.load(f)
                ]
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", e)
            
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å—á—ë—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    ### BEGIN get_remaining_grammar_count ###
    def get_remaining_grammar_count(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (builtin N5/N4/N3 –∏–ª–∏ imported).
        """
        if self.grammar_source.get() == "builtin":
            # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            self.ensure_builtin_loaded()
        return len(self.remaining_grammar)
    ### END get_remaining_grammar_count ###

    def update_counts_label(self):
        g_left = self.get_remaining_grammar_count()
        f_left = len(self.remaining_forms)

        # –ß–∏—Ç–∞–µ–º, –æ—Ç–∫—É–¥–∞ –±–µ—Ä—É—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        if self.grammar_source.get() == "imported":
            src = "–∏–º–ø–æ—Ä—Ç"
        else:
            src = self.user_level.get()

        self.counts_label.config(
            text=f"–û—Å—Ç–∞–ª–æ—Å—å   –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ ({src}) ‚Äî {g_left}   ¬∑   —Ñ–æ—Ä–º—ã ‚Äî {f_left}"
        )

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–µ—Å—Å–∏—è ¬´—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def get_today_items(self):
        n = max(1, self.selected_count.get())
        if self.mode.get() == "forms":
            items = random.sample(self.remaining_forms, min(n, len(self.remaining_forms)))
            self.remaining_forms = [x for x in self.remaining_forms if x not in items]
            self.save_progress()
            return items

        if self.grammar_source.get() == "builtin":
            self.ensure_builtin_loaded()
        src = self.remaining_grammar
        items = random.sample(src, min(n, len(src)))
        self.remaining_grammar = [x for x in src if x not in items]
        self.save_progress()
        return items

    def start_session(self):
        if (name := self.user_name.get().strip()):
            self.greeting_label.config(text=f"üëã –ü—Ä–∏–≤–µ—Ç, {name}! –ü–æ–µ—Ö–∞–ª–∏!")
        try:
            items = self.get_today_items()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", e)
            return

        win = tb.Toplevel(self.root)
        win.title("–°–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å")
        tb.Label(win, text="–°–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å:",
                 font=("Segoe UI", 11, "bold"),
                 bootstyle="primary").pack(pady=5)

        tbx = tb.Text(win, width=40, height=15, font=("Segoe UI", 12), wrap="word")
        tbx.pack(side="left", fill="both", expand=True, padx=10, pady=5)
        scr = tb.Scrollbar(win, orient="vertical", command=tbx.yview)
        scr.pack(side="right", fill="y")
        tbx.configure(yscrollcommand=scr.set)
        
        context_menu = tk.Menu(tbx, tearoff=0)

        def copy_selection():
            try:
                sel = tbx.get(tk.SEL_FIRST, tk.SEL_LAST)
                win.clipboard_clear()
                win.clipboard_append(sel)
            except tk.TclError:
                pass

        context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=copy_selection)

        def show_ctx_menu(event):
            try:
                context_menu.tk_popup(event.x_root, event.y_root)
            finally:
                context_menu.grab_release()

        tbx.bind("<Button-3>", show_ctx_menu)   # Windows / Linux
        tbx.bind("<Button-2>", show_ctx_menu)   # macOS

        def fmt(x):
            if isinstance(x, (list, tuple)) and len(x) == 2:
                t, c = x
                return f"‚Ä¢ {t} ‚Äî {c}"
            return f"‚Ä¢ {x}"
        tbx.insert("end", "\n".join(fmt(x) for x in items))
        tbx.config(state="disabled")
        
        win.clipboard_clear()
        win.clipboard_append(tbx.get("1.0", "end").strip())

        tb.Button(win, text="–ó–∞–∫—Ä—ã—Ç—å", style=BTN_STYLE_NAME, command=win.destroy).pack(pady=5)
        print("[DEBUG]", items, file=sys.stderr)

        self.update_counts_label()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ–∫–Ω–æ-—à–ø–∞—Ä–≥–∞–ª–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def open_form_guide(self):
        """–°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ-—à–ø–∞—Ä–≥–∞–ª–∫—É."""
        self.root.withdraw()
        top = tb.Toplevel(self.root)

        # —Å–æ–∑–¥–∞—ë–º —à–ø–∞—Ä–≥–∞–ª–∫—É
        form_guide.FormGuide(top, self.root)

        def on_close():
            top.destroy()
            self.root.deiconify()
        top.protocol("WM_DELETE_WINDOW", on_close)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def save_progress(self):
        data = {
            "remaining_grammar": self.remaining_grammar,
            "remaining_forms": self.remaining_forms,
            "grammar_source": self.grammar_source.get(),
            "user_level": self.user_level.get(),
            "imported_grammar": self.imported_grammar,
            "selected_count": self.selected_count.get(),
            "user_name": self.user_name.get(),
        }
        try:
            with open(PROGRESS_PATH, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"[SAVE ERROR] {e}")

    def load_progress(self):
        if not os.path.exists(PROGRESS_PATH):
            return
        try:
            with open(PROGRESS_PATH, "r", encoding="utf-8") as f:
                data = json.load(f)

            # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ["title", "comment"] ‚Üí ("title", "comment")
            def list2tuple(x):
                return tuple(x) if isinstance(x, list) and len(x) == 2 else x

            self.remaining_grammar = [list2tuple(x) for x in data.get("remaining_grammar", [])]
            self.remaining_forms   = data.get("remaining_forms", MainMenu.BUILTIN_FORMS.copy())
            self.grammar_source.set(data.get("grammar_source", "builtin"))
            self.user_level.set(data.get("user_level", "N5"))
            self.imported_grammar  = data.get("imported_grammar", [])
            self.selected_count.set(data.get("selected_count", 5))
            self.user_name.set(data.get("user_name", ""))
        except Exception as e:
            print(f"[LOAD ERROR] {e}")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—ã—Ö–æ–¥ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def on_close(self):
        self.save_progress()
        self.root.destroy()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def run(self):
        self.root.mainloop()


# ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    MainMenu().run()
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
